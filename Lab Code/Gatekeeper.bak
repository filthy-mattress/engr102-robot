//Competition code

//Motor ports
#define RIGHT_MOTOR OUT_A
#define LEFT_MOTOR OUT_C
#define BOTH_MOTORS OUT_AC
#define GATE_MOTOR OUT_B

//Motor speeds
#define MOVE_SPEED 75
#define GATE_SPEED 30

//Sensor ports
#define ULTRASONIC IN_1
#define TOUCH IN_2
#define MAGNETIC IN_3
#define LIGHT IN_4

//Sensor read macros
#define READ_ULTRASONIC Sensor(ULTRASONIC)
#define READ_TOUCH Sensor(TOUCH)
#define READ_MAGNETIC Sensor(MAGNETIC)
#define READ_LIGHT Sensor(LIGHT)

//Motor macros
#define motors(lspd,rspd) {OnFwd(LEFT_MOTOR,lspd);OnFwd(RIGHT_MOTOR,rspd);}
#define zp_turn_l(spd) motors(-(spd),spd);
#define zp_turn_r(spd) motors(spd,-(spd));

void testMagnetic(){
     while(true){
          TextOut(5,LCD_LINE2,NumToStr(READ_MAGNETIC));
     }
}

void motorGoTo(byte read,long tick){
     //Figure out which way to go
     long start_tick= MotorTachoCount(read);
     zp_turn_l(MOVE_SPEED);
     Wait(10);
     Off(BOTH_MOTORS);
     //Test to see if closer
     if(abs(MotorTachoCount(read)-tick)<abs(start_tick-tick)){
          zp_turn_l(MOVE_SPEED);//Continue
     }else{
          zp_turn_r(MOVE_SPEED);//turn around
     }
     until(MotorTachoCount(read)==tick);
     Off(BOTH_MOTORS);
}

//Scan variables
struct scanPoint{
     int read;
     long pos;
};
scanPoint maxPoint;
scanPoint minPoint;
bool run_scan=false;//True while loop is running. Set to false to exit loop.
bool scan_done=true;//True while not scanning. Use to avoid access collisions
byte scan_sensor=LIGHT;
byte scan_motor=RIGHT_MOTOR;

task scan(){//This loop will record sensor values and motor positions
     run_scan=true;
     scan_done=false;
     //reset
     maxPoint.read=Sensor(scan_sensor);
     maxPoint.pos=MotorTachoCount(scan_motor);
     minPoint.read=5000;
     minPoint.pos=MotorTachoCount(scan_motor);
     Wait(1000);
     while(run_scan){
          int read=Sensor(scan_sensor);
          long pos=MotorTachoCount(scan_motor);
          if(read!=0){
               if(read>maxPoint.read){
                   maxPoint.read=read;
                   maxPoint.pos=pos;
               }
               if(read<minPoint.read){
                   minPoint.read=read;
                   minPoint.pos=pos;
               }
          }
     }
     scan_done=true;
}
//Macros to manage scan process
#define start_scan(s,m) {scan_sensor=s;scan_motor=m;StartTask(scan);}
#define end_scan() {run_scan=false;until(scan_done);}

void scan360(byte sensor, byte motor){
     start_scan(sensor,motor);
     zp_turn_l(30);
     Wait(5000);//TESTING REQUIRED!!
     Off(BOTH_MOTORS);
     end_scan();
}

void test_spin(){
     scan360(LIGHT,RIGHT_MOTOR);
     TextOut(1,LCD_LINE1,NumToStr(maxPoint.read));
     TextOut(1,LCD_LINE2,NumToStr(maxPoint.pos));
     TextOut(1,LCD_LINE3,NumToStr(minPoint.read));
     TextOut(1,LCD_LINE4,NumToStr(minPoint.pos));
     while(true){}
}

task main(){
     SetSensorType(ULTRASONIC, SENSOR_TYPE_LOWSPEED);
     SetSensorType(TOUCH,SENSOR_TYPE_TOUCH);
     SetSensorHTMagnet(MAGNETIC);
     SetSensorType(IN_4,IN_TYPE_LIGHT_INACTIVE);
     SetSensorMode(IN_4,IN_MODE_PCTFULLSCALE);
     test_spin();
}
